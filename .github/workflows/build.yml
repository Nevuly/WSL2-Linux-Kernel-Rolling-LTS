name: LTS Kernel CI

on:
  push:
    tags:
      - 'linux-wsl-lts-6.6.[0-9]+'

run-name: LTS Release Build ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    container: nevuly/nevuly-dev-base:arch
    strategy:
      matrix:
        include:
          - arch: x86
            image-name: bzImage-x86_64
          - arch: arm64
            image-name: Image-arm64
    env:
      TAG_VERSION: '${{ github.ref_name }}'

    steps:
      - name: Trust this directory
        run: git config --global --add safe.directory /__w/WSL2-Linux-Kernel-Rolling-LTS/WSL2-Linux-Kernel-Rolling-LTS

      - uses: actions/checkout@main

      - name: Download Kernel
        shell: bash
        run: |
          git clone https://github.com/Nevuly/WSL2-Linux-Kernel-Rolling-LTS.git --depth 1 -b $TAG_VERSION linux

      - name: Build WSL2 Kernel
        run: |
          cd linux
          if [ ${{ matrix.arch }} == "x86" ]
          then
          echo "Build X86_64 Kernel"
          make KCONFIG_CONFIG=arch/x86/configs/config-wsl-x86 -j$(echo `nproc` + 1 | bc)
          cp arch/x86/boot/bzImage ../${{ matrix.image-name }}
          else
          echo "Build ARM64 Kernel"
          export ARCH=arm64 && export CROSS_COMPILE=aarch64-linux-gnu-
          make KCONFIG_CONFIG=arch/arm64/configs/config-wsl-arm64 -j$(echo `nproc` + 1 | bc)
          cp arch/arm64/boot/Image ../${{ matrix.image-name }}
          fi

      - name: Generate Kernel Module File
        run: |
          cd linux
          echo "Extract Kernel Version"
          IFS=- read -r var1 var2 var3 var4 <<< ${{ env.TAG_VERSION }}
          echo "Download Kernel Module Installer"
          wget https://gist.githubusercontent.com/Nevuly/4fe2bc21c84b9013c27713c6506fcf6b/raw/d14794195594d482be25f59074bd8d5feda6aa32/install.sh
          if [ ${{ matrix.arch }} == "x86" ]
          then
          echo "Generate X86 Kernel Module File"
          mkdir -p ${{ matrix.image-name }}-modules_install && make modules_install INSTALL_MOD_PATH=${{ matrix.image-name }}-modules_install
          cp install.sh ${{ matrix.image-name }}-modules_install/
          rm -rf ${{ matrix.image-name }}-modules_install/lib/modules/$var4-WSL2-LTS+/build
          mkdir -p ${{ matrix.image-name }}-modules_install/lib/modules/$var4-WSL2-LTS+/build
          export builddir=${{ matrix.image-name }}-modules_install/lib/modules/$var4-WSL2-LTS+/build
          install -Dt "$builddir" -m644 Makefile Module.symvers System.map vmlinux
          install -Dt "$builddir/kernel" -m644 kernel/Makefile
          install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
          cp -t "$builddir" -a scripts
          install -Dt "$builddir/tools/objtool" tools/objtool/objtool
          install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
          cp -t "$builddir" -a include
          cp -t "$builddir/arch/x86" -a arch/x86/include
          install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s
          install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
          install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h
          install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h
          install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
          install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
          install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h
          install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h
          find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;
          export arch
          for arch in "$builddir"/arch/*/; do
            [[ $arch = */x86/ ]] && continue
            echo "Removing $(basename "$arch")"
            rm -r "$arch"
          done
          find -L "$builddir" -type l -printf 'Removing %P\n' -delete
          find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete
          export file
          while read -rd '' file; do
            case "$(file -Sib "$file")" in
             application/x-sharedlib\;*)
              strip -v $STRIP_SHARED "$file" ;;
             application/x-archive\;*)
              strip -v $STRIP_STATIC "$file" ;;
             application/x-executable\;*)
              strip -v $STRIP_BINARIES "$file" ;;
             application/x-pie-executable\;*)
              strip -v $STRIP_SHARED "$file" ;;
            esac
          done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)
          strip -v $STRIP_STATIC "$builddir/vmlinux"
          rm -rf ${{ matrix.image-name }}-modules_install/lib/modules/$var4-WSL2-LTS+/build/Documentation
          cp -r Documentation ${{ matrix.image-name }}-modules_install/lib/modules/$var4-WSL2-LTS+/build/Documentation
          mkdir -p ${{ matrix.image-name }}-modules_install/src
          ln -sr "$builddir" "${{ matrix.image-name }}-modules_install/src/$var4-WSL2-LTS+"
          tar -czf ${{ matrix.image-name }}-modules_install.tar.gz ${{ matrix.image-name }}-modules_install && mv ${{ matrix.image-name }}-modules_install.tar.gz ../
          else
          echo "Generate ARM64 Kernel Module Package"
          mkdir -p ${{ matrix.image-name }}-modules_install && make modules_install INSTALL_MOD_PATH=${{ matrix.image-name }}-modules_install
          cp install.sh ${{ matrix.image-name }}-modules_install/
          tar -czf ${{ matrix.image-name }}-modules_install.tar.gz ${{ matrix.image-name }}-modules_install && mv ${{ matrix.image-name }}-modules_install.tar.gz ../
          fi

      - name: Generate SHA256 Checksum
        run: |
          sha256sum ${{ matrix.image-name }} > ${{ matrix.image-name }}.sha256
          sha256sum ${{ matrix.image-name }}-modules_install.tar.gz > ${{ matrix.image-name }}-modules_install.sha256

      - name: Upload Kernel Images
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.image-name }}
          path: |
            ${{ matrix.image-name }}
            ${{ matrix.image-name }}.sha256
            ${{ matrix.image-name }}-modules_install.tar.gz
            ${{ matrix.image-name }}-modules_install.sha256

  release:
    runs-on: ubuntu-latest
    needs: build
    env:
      TAG_VERSION: '${{ github.ref_name }}'

    steps:
      - uses: actions/checkout@main
      - uses: actions/download-artifact@v3
        with:
          path: release_images/

      - name: Release Kernel
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.TAG_VERSION }}
          tag_name: ${{ env.TAG_VERSION }}
          body: |
            **NOTICE**
            ARM64 kernel has not been tested. If you have any issues, please leave an issue on the Issues tab!

            **How to apply this kernel?**
            Before you try to apply this kernel, You **MUST** shutdown your WSL. (wsl --shutdown)
            Check this [document](https://learn.microsoft.com/en-us/windows/wsl/wsl-config).

            **How to install kernel module in WSL2?**
            The installation script is already contained within the kernel module file.
            You can run **install.sh** file with root.

            **This kernel built on ArchLinux.**

          files: |
            release_images/*/*
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          fail_on_unmatched_files: true
